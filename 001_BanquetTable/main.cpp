#include <iostream>

/*
 * Стол на 12 персон, 2 из них - это места VIP, они расположены рядом друг к другу во главе стола.
 * Стол протяжённый в длину, места расположены в два ряда.
 * Каждый пришедший должен быть “упакован” соответствующим образом.
 * Во-первых столовые приборы - их три на каждого человека (вилка, ложка, нож),
 *  плюс одна маленькая дополнительная ложечка для VIP-персон, для десерта.
 * Следом тарелки, каждому по две - для первого и второго блюда, для VIP персон +1 тарелка для десерта.
 * Ну и конечно стул
 *
 * двумерные массивы для количества приборов, посуды и стульев
 *
 * Пришедшая на 5-ое место первого ряда дама пришла вместе с ребёнком и поэтому на данное место
 *  был приставлен ещё один стул.
 * С третьего места во втором ряду в неизвестном направлении была украдена ложка.
 * После этого одна из VIP персон (любая) поделилась своей ложкой с тем у кого она пропала,
 *  а сам стал есть суп десертной.
 *  За ненадобностью официант забрал у него одну десертную тарелку,
 *  ибо есть десерт ложкой, которая побывала уже в супе - не комильфо.
 */

int main() {

    int fork[2][6] {1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1};
    int spoon[2][6] {1, 1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1, 1};
    int knife[2][6] {1, 1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1, 1};
    int dessert_spoon[2][6] {1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0, 0};
    int first_plate[2][6] {1, 1, 1, 1, 1, 1,
                           1, 1, 1, 1, 1, 1};
    int second_plate[2][6] {1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1};
    int dessert_plate[2][6] {1, 0, 0, 0, 0, 0,
                             1, 0, 0, 0, 0, 0};
    int chair[2][6] {1, 1, 1, 1, 1, 1,
                     1, 1, 1, 1, 1, 1};

    chair[0][4] += 1;
    spoon[1][2] -= 1;
    spoon[0][0] -=1;
    spoon[1][2] += 1;
    dessert_plate[0][0] -= 1;

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 6; j++) {
            std::cout << chair[i][j] << "\t";
        }
        std::cout << std::endl;
    }
}
